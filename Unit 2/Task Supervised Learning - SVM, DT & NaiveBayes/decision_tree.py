# -*- coding: utf-8 -*-
"""decision_tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EAl5bJDkuaAOv3Ll5nlmQcsJwRZUxSRH

#codigo en diferentes celdas
"""

# Importa las bibliotecas necesarias
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
import pandas as pd

# Cargar el Dataset
csv_path = '/content/kaggle.csv'
df = pd.read_csv(csv_path, encoding='latin-1')

# Solo dejaremos las columnas que utilizaremos
columnas_a_mantener = ['ï»¿Lat', 'Lng', 'Country', 'Cc']
df = df[columnas_a_mantener]

#me muestra el dataset ya con solo las columnas que dejamos
df.head

# Dividir los datos en características (X) y etiquetas (y)
X = df[['ï»¿Lat', 'Lng']]
y = df['Country']


# Dividir el conjunto de datos en 80% de entrenamiento y 20% de prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear y entrenar el modelo de árbol de decisión en el conjunto de entrenamiento
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)

# Realizar predicciones en el conjunto de prueba
y_pred = clf.predict(X_test)

# Crear un DataFrame para mostrar las predicciones y resultados en una tabla
resultados = pd.DataFrame({'Predicción ': y_pred, ' Resultado real ': y_test})

# Imprimir la tabla de resultados
print(resultados)

# Evaluar la precisión del modelo en el conjunto de prueba
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print("Precisión del modelo en el conjunto de prueba: {:.2f}%".format(accuracy * 100))

#instalamos estas dos bibliotecas para poder mostrar el arbol de decisiones tanto en texto asi como visualmente
!pip install graphviz
!pip install pydotplus

from sklearn.tree import export_text

# Obtén una representación textual del árbol de decisión
tree_text = export_text(clf, feature_names=list(X.columns))

# Imprime la representación textual
print(tree_text)

from sklearn.tree import export_graphviz
import graphviz
from IPython.display import Image

# Exportar el árbol de decisión en formato DOT
dot_data = export_graphviz(clf, out_file=None, feature_names=X.columns, class_names=clf.classes_,
                           filled=True, rounded=True, special_characters=True)

# Crear una representación gráfica del árbol
graph = graphviz.Source(dot_data)
graph.format = 'png'  # se puede cambiar el formato de la imagen dependiendo el que necesitemos (e.g., 'png', 'pdf')
graph.render('decision_tree')  # Guarda la imagen en un archivo llamado 'decision_tree.png'

# Mostrar la imagen
graph.view('decision_tree')
image = graph.view('decision_tree')
Image(image)

"""# codigo en una sola celda"""

# Importa las bibliotecas necesarias
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
import pandas as pd

# Cargar el Dataset
csv_path = '/content/kaggle.csv'
df = pd.read_csv(csv_path, encoding='latin-1')

# Solo dejaremos las columnas que utilizaremos
columnas_a_mantener = ['ï»¿Lat', 'Lng', 'Country', 'Cc']
df = df[columnas_a_mantener]

# Dividir los datos en características (X) y etiquetas (y)
X = df[['ï»¿Lat', 'Lng']]
y = df['Country']


# Dividir el conjunto de datos en 80% de entrenamiento y 20% de prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Crear y entrenar el modelo de árbol de decisión en el conjunto de entrenamiento
clf = DecisionTreeClassifier()
clf.fit(X_train, y_train)


# Realizar predicciones en el conjunto de prueba
y_pred = clf.predict(X_test)

# Crear un DataFrame para mostrar las predicciones y resultados en una tabla
resultados = pd.DataFrame({'Predicción ': y_pred, ' Resultado real ': y_test})

# Imprimir la tabla de resultados
print(resultados)

# Evaluar la precisión del modelo en el conjunto de prueba
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print("Precisión del modelo en el conjunto de prueba: {:.2f}%".format(accuracy * 100))

#instalamos estas dos bibliotecas para poder mostrar el arbol de decisiones tanto en texto asi como visualmente

!pip install graphviz
!pip install pydotplus

from sklearn.tree import export_text

# Obtén una representación textual del árbol de decisión
tree_text = export_text(clf, feature_names=list(X.columns))

# Imprime la representación textual
print(tree_text)



from sklearn.tree import export_graphviz
import graphviz
from IPython.display import Image

# Exportar el árbol de decisión en formato DOT
dot_data = export_graphviz(clf, out_file=None, feature_names=X.columns, class_names=clf.classes_,
                           filled=True, rounded=True, special_characters=True)

# Crear una representación gráfica del árbol
graph = graphviz.Source(dot_data)
graph.format = 'png'  # se puede cambiar el formato de la imagen dependiendo el que necesitemos (e.g., 'png', 'pdf')
graph.render('decision_tree')  # Guarda la imagen en un archivo llamado 'decision_tree.png'

# Mostrar la imagen
graph.view('decision_tree')
image = graph.view('decision_tree')
Image(image)